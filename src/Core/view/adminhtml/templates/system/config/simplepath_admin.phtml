<br/>
<div id="amazon_simplepath">

    <?php if (!$block->getCurrency()) : // SimplePath not supported ?>
        <div id="simplepath_unsported">
            <?= $block->escapeHtml(__('An unsupported currency is currently selected. ' .
                'Please review our configuration guide.')); ?>
            <span class="note">
            <a href="https://amzn.github.io/amazon-payments-magento-2-plugin/configuration.html" target="_blank">
                (<?= $block->escapeHtml(__('More Information')); ?>)
            </a>
        </span>
        </div>

    <?php else : ?>
        <div id="simplepath_hint">
            <?= $block->escapeHtml(
                __(
                    'You will be registering for a %1 account based on the base currency of your shop (%2).',
                    $block->getRegion(),
                    $block->getCurrency()
                )
            ); ?>
            <span class="note">
            <a href="https://amzn.github.io/amazon-payments-magento-2-plugin/overview.html" target="_blank">
                (<?= $block->escapeHtml(__('More Information')); ?>)
            </a>button action-configure
        </span>
        </div>

        <span class="apsp-getstarted">
        <a href="#" id="ap-get-started-link"
           class="action-default"><span><?= $block->escapeHtml(__('Get started with account registration')); ?></span></a>
    </span>
        <span class="apsp-or">
        &nbsp; <?= $block->escapeHtml(__('or')); ?> &nbsp;
        <a href="#" id="simplepath-skip">
            <?= $block->escapeHtml(__("I've already setup Pay with Amazon, I want to edit my settings")); ?>
        </a>
    </span>

        <p id="amazon_https_required">
            <?= $block->escapeHtml(__("In order to enable automatic account configuration using Amazon's secure key " .
                'exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin.')); ?>
        </p>
        <div class="save-json-wrapper hidden">
            <a id="ap-save-json" class="abs-action-primary" href="#">
                <?= $block->escapeHtml(__('Update Credentials')); ?>
            </a>
        </div>

    <?php endif; ?>

</div>

<div id="amazon-simplepath-back">
    <a href="#">&laquo; <?= $block->escapeHtml(__('Back')); ?></a>
</div>

<script>

    var AmazonSp = <?= /* @noEscape */ $block->getAmazonSpJson(); ?>;

    require(['uiRegistry', "prototype", "domReady!"], function (registry) {

        // Country code for ID}) selectors
        var co = AmazonSp.co.toLowerCase();

        var amazonSimplepath = $('amazon_simplepath');
        var amazonFields = $$('#payment_' + co + '_amazon_payment .form-list');
        var amazonSpBack = $('amazon-simplepath-back');
        var amazonCredentialJson = jQuery('#row_payment_' + co + '_amazon_payment_credentials_credentials_json');

        if (amazonCredentialJson.length > 0) {

            var button = $('ap-save-json');
            var jsonField = jQuery('#payment_' + co + '_amazon_payment_credentials_credentials_json');

            jsonField.val('').attr('placeholder', '<?= $block->escapeHtml(__('Paste JSON credentials string here.')); ?>');

            amazonCredentialJson.find('td.value').append('<br>').append(button);
            jQuery('#ap-save-json').click(function () {

                var elJson = jsonField.val();

                var obj = null;
                try {
                    obj = jQuery.parseJSON(jQuery.trim(elJson));
                }
                catch (err) {
                    obj = null;
                    jsonField.val('').attr('placeholder', '<?= $block->escapeHtml(__('Invalid JSON credentials entered, please try again.')); ?>').focus();
                }
                if (obj && typeof obj === 'object') {
                    var success = true;
                    for (var prop in obj) {
                        var item = jQuery('#payment_' + co + '_amazon_payment_credentials_' + jQuery.trim(prop));
                        if (item && item.length) {
                            jQuery('#payment_' + co + '_amazon_payment_credentials_' + jQuery.trim(prop)).val(jQuery.trim(obj[prop]));
                        }
                        else {
                            success = false;
                        }
                    }

                    if (success) {
                        jsonField.val('').attr('placeholder', '<?= $block->escapeHtml(__('Credential fields successfully updated. You may now test or save your credentials.')); ?>').focus();
                    }
                    else {
                        jsonField.val('').attr('placeholder', '<?= $block->escapeHtml(__('One or more of your credential fields did not parse correctly. Please review your entry and try again.')); ?>').focus();
                    }
                }
                return false;
            })
        }

        // Not enabled
        if ($('simplepath_hint') == null) {
            return;
        }

        // Show/hide fields
        if ($('payment_' + co + '_amazon_payment_credentials_merchant_id') != null) {
            if ($('payment_' + co + '_amazon_payment_credentials_merchant_id').value) {
                amazonSpBack.setStyle({'display': 'block'});
                amazonSimplepath.hide();

                if (window.location.hash == '#payment_amazon_payments-head') {
                    showAmazonConfig();
                }
            }
        }

        jQuery('#ap-get-started-link').click(function () {
            var heights = [660, 720, 810, 900];
            var popupHeight = heights[0];
            for (var i in heights) {
                popupHeight = (window.innerHeight >= heights[i]) ? heights[i] : popupHeight;
            }

            var popupWidth = 768;
            //var popupWidth = this.action.indexOf('payments-eu') == -1 ? 768 : 1050;

            var launchPopup = registry.get('launchPopup');
            launchPopup(AmazonSp.amazonUrl, popupWidth, popupHeight);
        });

        // Show fields and import
        amazonFields.each(Element.show);

        // Autoset payment region (for EU/UK)
        var region = AmazonSp.region.toLowerCase();
        if (region.indexOf('eu') != -1) {
            region = 'de';
        }
        var elCheckDefault = $$('#payment_' + co + '_amazon_payment_credentials_payment_region_inherit:checked');
        if (elCheckDefault && elCheckDefault.length) {
            elCheckDefault[0].click();
        }
        var elRegion = $('payment_' + co + '_amazon_payment_credentials_payment_region');
        if (elRegion) {
            elRegion.value = region;
        }

        // User is skipping simplepath
        jQuery('#simplepath-skip').click(function (e) {
            showAmazonConfig();
            amazonSpBack.setStyle({'display': 'block'});
            return false;
        });

        // User clicked 'Back'
        jQuery('#amazon-simplepath-back').click(function (e) {
            amazonSpBack.hide();
            amazonSimplepath.show();
            return false;
        });

        function showAmazonConfig() {
            amazonFields.each(Element.show);
            amazonSimplepath.hide();
            amazonSpBack.show();
            if (!$('payment_' + co + '_amazon_payment_credentials-head').hasClassName('open')) {
                $('payment_' + co + '_amazon_payment_credentials-head').click();
            }
        }
    });

</script>

<script>
    // Amazon Pop-up
    require(['uiRegistry'], function (registry) {
        'use strict';

        function launchPopup(url, requestedWidth, requestedHeight) {
            var leftOffset = getLeftOffset(requestedWidth),
                topOffset = getTopOffset(requestedHeight),
                newWindow = window.open(url, 'simplepath', 'scrollbars=yes, width=' + requestedWidth + ', height=' +
                    requestedHeight + ', top=' + topOffset + ', left=' + leftOffset);

            if (window.focus) {
                newWindow.focus();
            }
        }

        function getLeftOffset(requestedWidth) {
            var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;

            return ((windowWidth() / 2) - (requestedWidth / 2)) + dualScreenLeft;
        }

        function getTopOffset(requestedHeight) {
            var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;

            return ((windowHeight() / 2) - (requestedHeight / 2)) + dualScreenTop;
        }

        function windowWidth() {
            if (window.innerWidth) {
                return window.innerWidth;
            } else if (document.documentElement.clientWidth) {
                return document.documentElement.clientWidth;
            } else {
                return screen.width;
            }
        }

        function windowHeight() {
            if (window.innerHeight) {
                return window.innerHeight;
            } else if (document.documentElement.clientHeight) {
                return document.documentElement.clientHeight;
            } else {
                return screen.height;
            }
        }

        // window.launchPopup = launchPopup;
        registry.set('launchPopup', launchPopup);

    });
</script>
